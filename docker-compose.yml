services:
  qdrant:
    image: qdrant/qdrant:latest
    restart: always
    container_name: qdrant
    ports:
      - "6333:6333" 
      - "6334:6334"
    expose:
      - "6333"
      - "6334"
      - "6335"
    volumes:
      - qdrant_data:/qdrant/storage  # Persistent storage for Qdrant data
    healthcheck:
      #test: ["CMD", "curl", "-f", "http://host.docker.internal:6333/collections"]
      test: ["CMD", "curl", "-f", "http://localhost:6333/collections"]
      interval: 5s
      timeout: 3s
      retries: 5

  postgres_db:
    image: postgres:latest
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s
    volumes:
      - app-db_data:/var/lib/postgresql/data/pgdata  # Persistent storage for PostgreSQL data
    env_file:
      - .env
    environment:
      - PGDATA=/var/lib/postgresql/data/pgdata
      - POSTGRES_USER=${POSTGRES_USER?Variable not set}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD?Variable not set}
      - POSTGRES_DB=${POSTGRES_DB?Variable not set}
      - POSTGRES_SERVER=${POSTGRES_SERVER?Variable not set}
      - POSTGRES_PORT=${POSTGRES_PORT?Variable not set}
    ports:
      - "5433:5432"
  
  prestart:
    image: '${DOCKER_IMAGE_BACKEND?Variable not set}:${TAG-latest}'
    build:
      context: ./backend
    depends_on:
      postgres_db:
        condition: service_healthy
        restart: true
    command: bash scripts/prestart.sh
    env_file:
      - .env
    environment:
      - FIRST_SUPERUSER=${FIRST_SUPERUSER?Variable not set}
      - FIRST_SUPERUSER_PASSWORD=${FIRST_SUPERUSER_PASSWORD?Variable not set}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER?Variable not set}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD?Variable not set}
      - POSTGRES_SERVER=${POSTGRES_SERVER?Variable not set}
      - POSTGRES_PORT=${POSTGRES_PORT?Variable not set}

  backend:
    image: '${DOCKER_IMAGE_BACKEND?Variable not set}:${TAG-latest}'
    restart: always
    ports:
      - "8000:8000"
    build:
      context: ./backend
    env_file:
      - .env
    depends_on:
      # qdrant:
      #   condition: service_healthy
      #   restart: true
      postgres_db:
          condition: service_healthy
          restart: true
      prestart:
          condition: service_completed_successfully
    environment:
      QDRANT_HOST: "host.docker.internal"  # Magic DNS for host machine
      QDRANT_PORT: "6333"    
      FIRST_SUPERUSER: ${FIRST_SUPERUSER?Variable not set}
      FIRST_SUPERUSER_PASSWORD: ${FIRST_SUPERUSER_PASSWORD?Variable not set}
    # volumes:
    #   - ./backend:/app:delegated
    #command: ["python", "backend.py"]
    #command: sh -c "python wait_for_qdrant.py && uvicorn backend:app --host 0.0.0.0 --port 8000"
    # command: sh -c "uvicorn backend:app --host 0.0.0.0 --port 8000"
    # working_dir: /app
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  frontend:
    platform: linux/amd64
    build:
      context: ./frontend
    ports:
      - "5173:5173"
    working_dir: /app
    environment:
      - NODE_ENV=production
      - VITE_API_BASE_URL=http://localhost:8000
      - VITE_DEFAULT_USER_ID=${FIRST_SUPERUSER:-admin}
    depends_on:
      backend:
        condition: service_healthy
volumes:
  qdrant_data:
    driver: local
  app-db_data:

# configs:
#   qdrant_config:
#     content: |
#       log_level: INFO
